TODO: need to break up TranQueryController.
      use Events to communicate between controllers/views
      E.g use event to signal when tran filter is updated
        - let each controller decide how to handle the filter
            - e.g TranListController will download trans by page
            - e.g. ChartController will download all trans


TODO: separate investments from bank/credit accounts. trxType=0|1
      separate trans page for each: bank/credit, investment/other
      put bank/credit accounts summary at the top of trans page

TODO: trans page: don't immediately download ALL transactions. make the user ask for them (by clicking "Run" with an empty form).

TODO: add tran query form to account page.

TODO: add saved query list to front page (maybe add to header?)

TODO: more javascript charts!!!   what else?

TODO: account "nickname" - display in trans

TODO: tran "memo" or "notes" field - could display in Merchant field.

TODO: mintclient.py: check if mint tran is any different from thinmint tran before doing upsert (perf)

TODO: add paging to "new Transactions"

TODO: probably want to separate thinmint data (e.g. tags) from mint data, since mint fucks with the data all the time,
      which is really only a problem if thinmint data gets lost because of it.
      separate table - tm-transactions (or something)
      can't rely on ID (but can try)
      need to also capture date, amount, fi, account, merchant, etc, whatever it takes to match it up with brand new tran (with diff id)


done: tran query page (filter by account, by tag, by merchant?, by date range, by amount range?)
      tags: clothes + ilana - gift  ==>  tags.contains(clothes) and tags.contains(ilana) and !tags.contains(gift)
      tags: clothes and ilana or not gift  ==>  tags.contains(clothes) and tags.contains(ilana) and !tags.contains(gift)
      merchant: like "amazon" 
      date: after 01/01/16 and before 02/02/16
      amount: over 30.00 or under 10

    
TODO: don't create a new accountsTimeSeries record if the balance hasn't changed since the last one...
      or... remove the last one and insert a new one with the current day?
      no.  because when the balance changes, it'll look like a gradual change between the last
      accountTimeSeries record and this one?  actually... no that's not correct either, because
      we'll add a new record for the new balance.


done: match up pending trans with completed trans  
      note: mint deletes isPending trans once they're matched up
            should i also delete pending trans once they've been matched?
            basically every tran that i have but mint doesn't is probably an isPending that's been removed.
            i.e. all my isPending=true trans will eventually be deleted by mint
            check those trans against the new ones to find a match
            transfer tags + other fields from pending tran to completed tran 
            remove pendingTran 


done: add indexes for timestamp, account, fi
      db.transactions.createIndex( { timestamp: -1 } )
      db.transactions.createIndex( { account: 1, fi: 1 } )
      db.transactions.update( {}, { "$unset": { "isResolved": "" } }, { "multi": true} )
      ./mintclient.py import
      ./mintclient.py resolve

        
done: all investments trans have txnType=1, everything else txnType=0
      technically this is "income" too... 
      autotag! "investment"



===================================================================================================
Exporting/Importing to mongolab:


C:\easy\mysandbox\thinmint-server>C:\\mongodb-2.6.11\\bin\\mongodump -h localhost:27017 -d thinmint -o mongo.thinmint.dump
C:\\mongodb-2.6.11\\bin\\mongorestore -h {mongolab-server} -d {db} -u <user> -p <password> mongo.thinmint.dump\thinmint


===================================================================================================
CURL commands:

curl -X POST \
     -d '{ "query": { "accountType": "bank" }, "options": { "fields": { "accountName": 1, "accountType": 1 } } }' \
     -H 'content-type:application/json'  \
     http://localhost:8081/query/accounts

curl -X POST \
     -d '{ "query": { "account": "SAVINGS" }, "options": { "fields": { "account": 1, "date": 1, "amount": 1, "category": 1, "omerchant": 1, "isDebit": 1 } } }' \
     -H 'content-type:application/json'  \
     http://localhost:8081/query/transactions

curl -X POST \
     -d '{ "query": { "$or": [ { "hasBeenAcked": { "$exists": false } }, { "hasBeenAcked" : false } ] }, "options": { "fields": { "account": 1, "date": 1, "amount": 1, "category": 1, "omerchant": 1, "isDebit": 1 } } }' \
     -H 'content-type:application/json'  \
     http://localhost:8081/query/transactions


