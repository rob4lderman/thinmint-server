
done: allow new accounts
      1. rename existing collections: 
         db['tm-users'].renameCollection("/tm/users")
         db.accounts.renameCollection("/tm/ilana.bram@gmail.com/accounts")
         db.accountsTimeSeries.renameCollection("/tm/ilana.bram@gmail.com/accountsTimeSeries")
         db.transactions.renameCollection("/tm/ilana.bram@gmail.com/transactions")
         db.savedqueries.renameCollection("/tm/ilana.bram@gmail.com/savedqueries")
         db.tags.renameCollection("/tm/ilana.bram@gmail.com/tags")
      2. update all the code.
      

TODO: backfill time-series during batch update
      - normally it'll just overwrite what's already there
      - if historic tran data was updated, it'll update the time series properly
      - if account is new, it'll backfill its time-series

TODO: guest user with sample data
TODO: when adding new user, need to create indexes:
      db.transactions.createIndex( { timestamp: -1 } )
      db.transactions.createIndex( { account: 1, fi: 1 } )


TODO: tag-by-month charts
      allow user to create custom charts with combinations of tags
      e.g: tags= income, bills + rent:  two datasets, 1 for income, 1 for (bills+rent)

TODO: tag-by-month projections (based on tag-by-month trends)?

done: "untagged" bars


TODO: Datastore shouldn't emit events.  Callers should emit events.


TODO: include trxType=0|1 in tran query form.

TODO: trans page: don't immediately download ALL transactions. make the user ask for them (by clicking "Run" with an empty form).

TODO: add tran query form to accounts page.

TODO: add saved query list to front page (maybe add to header?)

TODO: more javascript charts!!!   what else?

TODO: account "nickname" - display in trans

TODO: tran "memo" or "notes" field - could display in Merchant field.

DONE: mintclient.py: check if mint tran is any different from thinmint tran before doing upsert (perf).
      not possible.  because thinmint tran is *always* different - cuz mintMarker is always reset to 0.

TODO: add paging to "new Transactions"

TODO: probably want to separate thinmint data (e.g. tags) from mint data, since mint fucks with the data all the time,
      which is really only a problem if thinmint data gets lost because of it.
      separate table - tm-transactions (or something)
      can't rely on ID (but can try)
      need to also capture date, amount, fi, account, merchant, etc, whatever it takes to match it up with brand new tran (with diff id)


done: tran query page (filter by account, by tag, by merchant?, by date range, by amount range?)
      tags: clothes + ilana - gift  ==>  tags.contains(clothes) and tags.contains(ilana) and !tags.contains(gift)
      tags: clothes and ilana or not gift  ==>  tags.contains(clothes) and tags.contains(ilana) and !tags.contains(gift)
      merchant: like "amazon" 
      date: after 01/01/16 and before 02/02/16
      amount: over 30.00 or under 10

    
TODO: don't create a new accountsTimeSeries record if the balance hasn't changed since the last one...
      or... remove the last one and insert a new one with the current day?
      no.  because when the balance changes, it'll look like a gradual change between the last
      accountTimeSeries record and this one?  actually... no that's not correct either, because
      we'll add a new record for the new balance.


done: match up pending trans with completed trans  
      note: mint deletes isPending trans once they're matched up
            should i also delete pending trans once they've been matched?
            basically every tran that i have but mint doesn't is probably an isPending that's been removed.
            i.e. all my isPending=true trans will eventually be deleted by mint
            check those trans against the new ones to find a match
            transfer tags + other fields from pending tran to completed tran 
            remove pendingTran 




===================================================================================================
Password encryption

Want to store mint username/passwords in DB.

Use two-way hashing of passwords

Store private key in heroku ENV variable
    - make sure it's not accessible to public

Add individual (account-specific) salt to each password
    - slows down brute force attack
    - salt must be account-specific.  
        - using same salt for all accounts can be hacked if the hacker creates an account himself
          where he knows the password and therefore can determine the salt

Types of attacks:
    brute force
    dictionary attack: dict of pre-computed hashes for common passwords
    rainbow table

python: 
http://stackoverflow.com/questions/11132714/python-two-way-alphanumeric-encryption
https://gist.github.com/sekondus/4322469

node.js:
http://stackoverflow.com/questions/6953286/node-js-encrypting-data-that-needs-to-be-decrypted

use AES.  https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
block size=128 bits
key size=128, 192, or 256 bits


TODO: block size?
        
TODO: private key


===================================================================================================
Exporting/Importing to mongolab:


C:\easy\mysandbox\thinmint-server>C:\\mongodb-2.6.11\\bin\\mongodump -h localhost:27017 -d thinmint -o mongo.thinmint.dump
C:\\mongodb-2.6.11\\bin\\mongorestore -h {mongolab-server} -d {db} -u <user> -p <password> mongo.thinmint.dump\thinmint

done: add indexes for timestamp, account, fi
      db.transactions.createIndex( { timestamp: -1 } )
      db.transactions.createIndex( { account: 1, fi: 1 } )
      db.transactions.update( {}, { "$unset": { "isResolved": "" } }, { "multi": true} )
      ./mintclient.py import
      ./mintclient.py resolve



===================================================================================================
CURL commands:

curl -X POST \
     -d '{ "query": { "accountType": "bank" }, "options": { "fields": { "accountName": 1, "accountType": 1 } } }' \
     -H 'content-type:application/json'  \
     http://localhost:8081/query/accounts

curl -X POST \
     -d '{ "query": { "account": "SAVINGS" }, "options": { "fields": { "account": 1, "date": 1, "amount": 1, "category": 1, "omerchant": 1, "isDebit": 1 } } }' \
     -H 'content-type:application/json'  \
     http://localhost:8081/query/transactions

curl -X POST \
     -d '{ "query": { "$or": [ { "hasBeenAcked": { "$exists": false } }, { "hasBeenAcked" : false } ] }, "options": { "fields": { "account": 1, "date": 1, "amount": 1, "category": 1, "omerchant": 1, "isDebit": 1 } } }' \
     -H 'content-type:application/json'  \
     http://localhost:8081/query/transactions


